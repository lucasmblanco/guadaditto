name: Version Update
permissions:
  contents: write
on:
  push:
    branches:
      - dev
jobs:
  version:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
    steps:
      # Checkout específico de la rama que activó el workflow
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      # Confirmar la rama en la que estamos trabajando
      - name: Verify current branch
        run: |
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "Working on branch: $CURRENT_BRANCH"
          echo "Expected branch from GitHub ref: ${GITHUB_REF#refs/heads/}"

          if [ "$CURRENT_BRANCH" != "${GITHUB_REF#refs/heads/}" ]; then
            echo "Error: Branch mismatch. Expected ${GITHUB_REF#refs/heads/}, got $CURRENT_BRANCH"
            exit 1
          fi

          echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Perform semantic version
        uses: paulhatch/semantic-version@v5.0.3
        id: semantic_version
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          version_format: "${major}.${minor}.${patch}-rc${increment}"
          user_format_type: "csv"
          bump_each_commit: false
          search_commit_body: true

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          custom_tag: ${{ steps.semantic_version.outputs.version_tag }}
          tag_prefix: ""
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version.ts
        run: |
          VERSION="${{ steps.semantic_version.outputs.version }}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "export const VERSION = '${VERSION}';" > src/version.ts
          echo "export const BUILD_DATE = '$(date -u +"%Y-%m-%d")';" >> src/version.ts

      - name: Update package.json and manifest.json
        run: |
          # Actualizar package.json
          pnpm pkg set version=${VERSION}

          # Ejecutar script para actualizar manifest.json
          node -e "
          const fs = require('fs');
          const manifest = JSON.parse(fs.readFileSync('./public/manifest.json', 'utf8'));
          manifest.version = '${VERSION}';
          fs.writeFileSync('./public/manifest.json', JSON.stringify(manifest, null, 2));
          "

      - name: Check for changes
        id: git_status
        run: |
          git status --porcelain
          if [[ -z $(git status --porcelain) ]]; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
          fi

      # Commit y push SOLO a la rama actual, con validaciones adicionales
      - name: Commit and Push Version
        if: steps.git_status.outputs.no_changes == 'false'
        run: |
          # Verificar de nuevo que estamos en la rama correcta antes de hacer push
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          if [ "$CURRENT_BRANCH" != "${{ env.branch }}" ]; then
            echo "Error: Branch mismatch before push. Expected ${{ env.branch }}, got $CURRENT_BRANCH"
            exit 1
          fi

          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add package.json public/manifest.json src/version.ts
          git commit -m "chore: bump version to ${VERSION}"

          # Push explícitamente a la rama actual
          git push origin $CURRENT_BRANCH

      # - name: Create production release
      #   uses: ncipollo/release-action@v1
      #   id: release
      #   with:
      #     tag: ${{ steps.tag_version.outputs.new_tag }}
      #     name: ${{ steps.semantic_version.outputs.version_tag }}
      #     body: ${{ steps.build_changelog.outputs.changelog }}
      #     draft: false
      #     prerelease: false
      #     commit: ${{ steps.semantic_version.outputs.current_commit }}

      - name: No changes to commit
        if: steps.git_status.outputs.no_changes == 'true'
        run: echo "No changes detected. Skipping commit."
